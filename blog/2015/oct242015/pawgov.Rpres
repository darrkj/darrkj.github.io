PAW Gov - Data Munging/Wrangling
========================================================
author: Kenny Darrell, Lead Data Scientist - Elder Research
date: October 13, 2015
autosize: true


<style>

/* slide titles */
.reveal h3 { 
  font-size: 70px;
  color: blue;
}

.reveal big { 
  font-size: 50px;
}

/* heading for slides with two hashes ## 
.reveal .slides section .slideContent h2 {
   font-size: 40px;
   font-weight: bold;
   color: green;
} */

/* ordered and unordered list styles 
.reveal ul, 
.reveal ol {
    font-size: 50px;
    color: red;
    list-style-type: square;
} */

</style>


What is it?
========================================================
width: 1860
height: 980

<big>Data munging or data wrangling is the process of manually converting data from one "raw" form into another format that allows for more convenient consumption of the data.</big>




The hidden aspect of Analytics
========================================================

Predictive Analytics requires

1. Data Persistence to house data
2. Data Science to correctly answer questions
3. Data Products to visualize and consume results
4. Data Munging so that all the above are possible


Why, you ask?
========================================================

- Data NEVER comes in the CORRECT format
- Data was collected for a DIFFERENT purpose
- Data comes from DISPERATE places
- Data CHANGES over time
- Data always has ERRORS in it



Data Janitor, the unsung hero of Data Science
========================================================

This takes up roughly 80% of time/effort

You could double your time spent on analytics by reducing time on cleaning by only a quarter!

<div style="text-align:center"><img src ="janitor.png" /></div>


Pipes (brief detour)
========================================================

- It is easier to munge data if we think in steps
- Using the pipe (%>%) construct helps
- Allows for left-to-right (not from the inside and out)
- make it easy to add steps anywhere in the sequence



Which is more readable
========================================================

```{r, eval = F}
bop_on(scoop_up(hop_through(foo_foo, forest), field_mouse), head)
```

or

```{r, eval = F}
foo_foo %>%
  hop_through(forest) %>%
  scoop_up(field_mouse) %>%
  bop_on(head)
```


Setup
========================================================

```{r}
options(stringsAsFactors = FALSE)
library(dplyr)
library(lubridate)
library(purrr)
library(ggplot2)
library(stringr)
```


Where do we start?
========================================================

Always start with a question!

Which presidential candidate made more money?



The Data
========================================================

<div style="text-align:center"><img src ="data.png" /></div>


The real view
========================================================

<div style="text-align:center"><img src ="fecdata.png" /></div>




What does any of it mean
========================================================

<div style="text-align:center"><img src ="dict.png" /></div>



Load Individual Donations
========================================================

```{r, cache = T}
ind <- read.csv('indiv12.txt', sep = '|', 
                skipNul = T, na.strings = '', 
                header = F, quote = "")
```

```{r echo = F}
head(ind)
```

The data has no names
========================================================

```{r}
names(ind) <- names(read.csv('indiv_header_file.csv'))
```

```{r echo = F}
head(ind)
```




Select
========================================================
Decrease the width of your data
```{r}
ind %>% 
  select(CMTE_ID, TRANSACTION_TP, ENTITY_TP, 
         TRANSACTION_DT, TRANSACTION_AMT) -> ind
```
```{r echo = F}
head(ind)
```


Filter
========================================================
Decrease the height of your data
```{r}
ind %>% 
  filter(TRANSACTION_TP == '15') %>% 
  select(-TRANSACTION_TP) -> ind
```
```{r echo = F}
head(ind)
```


The process
========================================================

- Load Data
- Give it correct names
- Select fields (columns) we need
- Filter rows (observations) that are relevant
- Rinse and repeat for other data sets



Remove code noise
========================================================
```{r}
add_names <- function(df, file) {
  names(df) <- names(read.csv(file))
  df
}

read_fec <- function(file) {
  read.csv(file, sep = '|', skipNul = T, na.strings = '', 
           header = F, quote = "")
}
```


Candidate Data
========================================================

```{r}
'cn12.txt' %>%
  read_fec %>%
  add_names('cn_header_file.csv') %>%
  select(CAND_ID, CAND_NAME, CAND_ELECTION_YR, CAND_OFFICE) %>% 
  filter(CAND_OFFICE == 'P')  %>%
  select(-CAND_OFFICE) -> cand

```

```{r echo = F}
head(cand)
```



Link Data
========================================================

```{r}
'ccl12.txt' %>%
  read_fec %>%
  add_names('ccl_header_file.csv') %>%
  select(CAND_ID, CAND_ELECTION_YR, CMTE_ID) -> link
```
```{r echo = F}
head(link)
```



Joins
========================================================

How do we turn three data sets into one?

<div style="text-align:center"><img src ="joins.png" /></div>

Joins
========================================================

This will increase the width of the data

```{r}
cand %>% 
  inner_join(link, by = c("CAND_ID", "CAND_ELECTION_YR")) -> df 
```
```{r echo = F}
head(df)
```

Joins
========================================================

```{r}
df %>% 
  inner_join(ind, by = "CMTE_ID") -> df
```
```{r echo = F}
head(df)
```

Cleanup
========================================================

```{r}
df %>% 
  select(-CAND_ID, -CMTE_ID) -> df
```
```{r echo = F}
head(df)
```



Missing values
========================================================
```{r}
df %>% filter(is.na(TRANSACTION_DT))
```


Date is not really date
========================================================
```{r}
str(df)
```



Mutate to the Rescue
========================================================

```{r}
df %>%
  filter(!is.na(TRANSACTION_DT)) %>%
  mutate(date = as.Date(mdy(TRANSACTION_DT))) %>%
  select(-TRANSACTION_DT) -> df
```
```{r echo = F}
head(df)
```


Too verbose
========================================================

```{r}
df %>% 
  rename(  name = CAND_NAME, 
         amount = TRANSACTION_AMT,
           type = ENTITY_TP,
           year = CAND_ELECTION_YR) -> df
```
```{r echo = F}
head(df)
```


Names look pretty rough
========================================================

```{r}
df$name %>%
  str_split(", ") %>% 
  map_chr(~ paste(.[[2]], .[[1]])) -> df$name
```
```{r echo = F}
head(df)
```



Just one election
========================================================

```{r}
df %>% 
  filter(year == 2012) %>% 
  select(-year) -> df
```
```{r echo = F}
head(df)
```


Only People
========================================================

```{r}
df %>% 
  filter(type %in% c('IND', 'CAN')) %>%
  select(-type) -> df
```
```{r echo = F}
head(df)
```



Who?
========================================================

```{r}
df %>% 
  group_by(name) %>% 
  summarise(obs = n()) -> popular
```
```{r echo = F}
as.data.frame(popular)
```

Who?
========================================================
```{r}
popular %>% top_n(10, obs) -> most_popular
```
```{r echo = F}
as.data.frame(most_popular)
``````


Not Everybody
========================================================

```{r}
df %>% 
  semi_join(most_popular, by = 'name') -> df
```
```{r echo = F}
head(df)
```


Back to the Future
========================================================

```{r}
df %>% 
  filter(date < as.Date(mdy('11152012'))) -> df
```
```{r echo = F}
head(df)
```


From average people
========================================================

```{r}
df %>% 
  filter(abs(amount) < 100000) -> df
```
```{r echo = F}
head(df)
```

Aggregations
========================================================

```{r}
df %>% 
  group_by(name, date) %>%
  summarise(total = sum(amount)) -> df
```
```{r echo = F}
head(df)
```




Add in missing days
========================================================

```{r}
allDates <- 
  data.frame(date = as.Date(min(df$date) : max(df$date), 
                            origin = origin))

df %>% 
  split(.$name) %>%
  map( ~ full_join(., cbind(allDates, name = .$name[1]), 
                   by = c("name", "date"))) %>%
  bind_rows %>%
  arrange(name, date) -> df
```
```{r echo = F}
head(df)
``````



Zero 
========================================================

```{r}
df$total <- ifelse(is.na(df$total), 0, df$total)
```
```{r echo = F}
head(df)
``````

Order them
========================================================

```{r}
df %>% 
  arrange(name, date) -> df
```
```{r echo = F}
head(df)
``````


Running total
========================================================

```{r}
df %>% 
  group_by(name) %>%
  mutate(cum_tot = cumsum(total)) -> tot
```
```{r echo = F}
head(tot)
```






Result
========================================================

```{r, eval = F}
ggplot(tot, aes(x = date, y = cum_tot, 
                color = name, group = name)) + geom_line()
```
<div style="text-align:center"><img src ="plot1.jpeg" /></div>






Total Money
========================================================

```{r}
tot %>% 
  group_by(name) %>%
  summarise(max = max(cum_tot)) %>%
  arrange(desc(max)) -> totals
```
```{r echo = F}
totals
```



Modified Result
========================================================

```{r, eval = F}
tot %>% 
  anti_join(totals %>% top_n(2, max), by = 'name') %>%
  ggplot(aes(x = date, y = cum_tot, 
             color = name, group = name)) +
  geom_line()
```
<div style="text-align:center"><img src ="plot2.jpeg" /></div>


What did we answer
========================================================

We changed the question quite a bit.

Which presidential candidate made more money?

Of the popular candidates in the 2012 Presidential Election, who received the most contributions from average people using observations that made temporal sense.

For some definition of the words popular and average.

